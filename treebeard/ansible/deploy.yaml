# This file expects a {{ experiment_path }} variable to be passed as an extra var to the ansible-playbook command

- name: Deploy the system
  hosts: all
  become: yes
  become_user: cc
  tasks:
    # - name: Update and upgrade apt
    #   ansible.builtin.apt:
    #     update_cache: yes # apt update
    #     cache_valid_time: 3600 # update if not updated in the last 3600 seconds
    #     upgrade: yes # apt upgrade

    # - name: Add Docker GPG apt Key
    #   apt_key:
    #     url: https://download.docker.com/linux/ubuntu/gpg
    #     state: present

    # - name: Add Docker Repository
    #   apt_repository:
    #     repo: deb https://download.docker.com/linux/ubuntu bionic stable
    #     state: present
    
    - name: Add 10.52.0.0/16 to trusted zone
      ansible.builtin.command:
        cmd: firewall-cmd --zone=trusted --add-source=10.52.0.0/16
      register: result
      changed_when: "'ALREADY_ENABLED' not in result.stderr and 'SUCCESS' in result.stdout"

    # New Task: Update package cache (apt update)
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    # New Task: Upgrade all packages (apt upgrade -y)
    - name: Upgrade all packages
      ansible.builtin.apt:
        upgrade: yes

    # --- New Task to Install Redis ---
    - name: Install Redis Server
      ansible.builtin.apt:
        name: redis-server
        state: present

    # --- Task to Install Packages (converted to match Redis task format) ---
    - name: Install Packages
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
          - python3-docker
          - socat
        state: present
        update_cache: yes

    - name: Create treebeard directory
      ansible.builtin.file:
        path: /home/cc/treebeard
        state: directory
        mode: "0755"

    - name: Remove previous log files
      ansible.builtin.shell:
        cmd: find . -name "*.log" -delete
        chdir: /home/cc/treebeard

    - name: Include endpoints as vars
      ansible.builtin.include_vars:
        file: "{{ item.file_path }}"
        name: "{{ item.name }}"
      loop:
        - {
            name: router_endpoints,
            file_path: "{{ experiment_path }}/router_endpoints.yaml",
          }
        - {
            name: shardnode_endpoints,
            file_path: "{{ experiment_path }}/shardnode_endpoints.yaml",
          }
        - {
            name: oramnode_endpoints,
            file_path: "{{ experiment_path }}/oramnode_endpoints.yaml",
          }
        - {
            name: redis_endpoints,
            file_path: "{{ experiment_path }}/redis_endpoints.yaml",
          }
        - {
            name: jaeger_endpoint,
            file_path: "{{ experiment_path }}/jaeger_endpoint.yaml",
          }
        - {
            name: parameters,
            file_path: "{{ experiment_path }}/parameters.yaml",
          }

    - name: Move Jaeger docker-compose.yaml and Start it
      block:
        - name: Move Jaeger file
          template:
            src: ./templates/docker-compose.yaml.j2
            dest: /home/cc/treebeard/jaeger.yaml
        - name: Run Jaeger
          shell:
            cmd: "docker compose -f jaeger.yaml up -d"
            chdir: /home/cc/treebeard
        - name: Create Socat reverse proxy service
          template:
            src: templates/socat.service.j2
            dest: /lib/systemd/system/jaeger-socat.service
        - name: Start Socat service
          ansible.builtin.systemd:
            name: "jaeger-socat"
            state: restarted
            daemon_reload: true
      when: parameters.trace == true

    - name: Install Redis
      ansible.builtin.apt:
        name:
          - redis
      delegate_to: "{{ item.deploy_host }}"
      with_items: "{{ redis_endpoints.endpoints }}"

    - name: Copy Redis Config
      template:
        src: templates/redis.conf.j2
        dest: /etc/redis/redis-{{ item.id }}.conf
      delegate_to: "{{ item.deploy_host }}"
      with_items: "{{ redis_endpoints.endpoints }}"

    - name: Create Redis systemd services
      template:
        src: templates/redis.service.j2
        dest: "/lib/systemd/system/redis-{{ item.id }}.service"
      delegate_to: "{{ item.deploy_host }}"
      with_items: "{{ redis_endpoints.endpoints }}"

    - name: Stop previous Redis services
      ansible.builtin.shell:
        cmd: systemctl stop redis*

    - name: Start Redis
      ansible.builtin.systemd:
        name: "redis-{{ item.id }}"
        state: restarted # will cause reinitialization of the DB
        daemon_reload: true
      delegate_to: "{{ item.deploy_host }}"
      with_items: "{{ redis_endpoints.endpoints }}"

    - name: Build the go executables locally
      ansible.builtin.shell:
        chdir: "{{ item }}"
        cmd: env GOOS=linux GOARCH=amd64 go build .
      delegate_to: 127.0.0.1
      become: yes
      become_user: cc
      loop:
        - "../cmd/client/"
        - "../cmd/router/"
        - "../cmd/shardnode/"
        - "../cmd/oramnode/"

    - name: Create new directories
      ansible.builtin.file:
        path: "{{ '/home/cc/treebeard/' + item[0] + '/'  + item[1].id | string + '/' + item[1].replicaid | default('') | string }}"
        state: directory
        mode: "0755"
      delegate_to: "{{ item[1].deploy_host }}"
      loop: >-
        {{
        ["router"] | product(router_endpoints.endpoints) | list +
        ["shardnode"] | product(shardnode_endpoints.endpoints) | list +
        ["oramnode"] | product(oramnode_endpoints.endpoints) | list
        }}

    - name: Copy executables
      ansible.builtin.copy:
        src: "../cmd/{{ item[0] }}/{{ item[0] }}"
        dest: "{{ '/home/cc/treebeard/' + item[0] + '/' + item[0] }}"
        mode: "0777"
      delegate_to: "{{ item[1].deploy_host }}"
      loop: >-
        {{
        ["router"] | product(router_endpoints.endpoints) | list +
        ["shardnode"] | product(shardnode_endpoints.endpoints) | list +
        ["oramnode"] | product(oramnode_endpoints.endpoints) | list
        }}

    - name: Copy client
      ansible.builtin.copy:
        src: "../cmd/client/client"
        dest: "/home/cc/treebeard/"
        mode: "0777"

    - name: Copy configs
      ansible.builtin.copy:
        src: "{{ experiment_path }}/{{ item[0] }}"
        dest: "/home/cc/treebeard/{{ item[0] }}"
        mode: "0666"
      delegate_to: "{{ item[1] }}"
      loop: "{{ ['router_endpoints.yaml', 'shardnode_endpoints.yaml', 'oramnode_endpoints.yaml', 'redis_endpoints.yaml', 'parameters.yaml', 'trace.txt'] | product(groups['all']) | list }}"

    - name: Create oramnode systemd services
      template:
        src: templates/treebeard-oramnode.service.j2
        dest: "/lib/systemd/system/treebeard-oramnode-{{ item.id }}-{{ item.replicaid }}.service"
      delegate_to: "{{ item.deploy_host }}"
      with_items: "{{ oramnode_endpoints.endpoints }}"

    - name: Stop previous services
      ansible.builtin.shell:
        cmd: systemctl stop treebeard-*

    - name: Start oramnode services
      ansible.builtin.systemd:
        name: "treebeard-oramnode-{{ item.id }}-{{ item.replicaid }}"
        state: restarted
        daemon_reload: true
      delegate_to: "{{ item.deploy_host }}"
      loop_control:
        pause: 1 # let the first node become the leader first
      with_items: "{{ oramnode_endpoints.endpoints }}"

    - name: Create shardnode systemd services
      template:
        src: templates/treebeard-shardnode.service.j2
        dest: "/lib/systemd/system/treebeard-shardnode-{{ item.id }}-{{ item.replicaid }}.service"
      delegate_to: "{{ item.deploy_host }}"
      with_items: "{{ shardnode_endpoints.endpoints }}"

    - name: Start shardnode services
      ansible.builtin.systemd:
        name: "treebeard-shardnode-{{ item.id }}-{{ item.replicaid }}"
        state: restarted
        daemon_reload: true
      delegate_to: "{{ item.deploy_host }}"
      loop_control:
        pause: 1 # let the first node become the leader first
      with_items: "{{ shardnode_endpoints.endpoints }}"

    - name: Create router systemd services
      template:
        src: templates/treebeard-router.service.j2
        dest: "/lib/systemd/system/treebeard-router-{{ item.id }}.service"
      delegate_to: "{{ item.deploy_host }}"
      with_items: "{{ router_endpoints.endpoints }}"

    - name: Start router services
      ansible.builtin.systemd:
        name: "treebeard-router-{{ item.id }}"
        state: restarted
        daemon_reload: true
      delegate_to: "{{ item.deploy_host }}"
      with_items: "{{ router_endpoints.endpoints }}"
