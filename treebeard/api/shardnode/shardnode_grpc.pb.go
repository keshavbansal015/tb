// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: shardnode.proto

package shardnode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShardNode_BatchQuery_FullMethodName    = "/shardnode.ShardNode/BatchQuery"
	ShardNode_SendBlocks_FullMethodName    = "/shardnode.ShardNode/SendBlocks"
	ShardNode_AckSentBlocks_FullMethodName = "/shardnode.ShardNode/AckSentBlocks"
	ShardNode_JoinRaftVoter_FullMethodName = "/shardnode.ShardNode/JoinRaftVoter"
)

// ShardNodeClient is the client API for ShardNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShardNodeClient interface {
	BatchQuery(ctx context.Context, in *RequestBatch, opts ...grpc.CallOption) (*ReplyBatch, error)
	SendBlocks(ctx context.Context, in *SendBlocksRequest, opts ...grpc.CallOption) (*SendBlocksReply, error)
	AckSentBlocks(ctx context.Context, in *AckSentBlocksRequest, opts ...grpc.CallOption) (*AckSentBlocksReply, error)
	JoinRaftVoter(ctx context.Context, in *JoinRaftVoterRequest, opts ...grpc.CallOption) (*JoinRaftVoterReply, error)
}

type shardNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewShardNodeClient(cc grpc.ClientConnInterface) ShardNodeClient {
	return &shardNodeClient{cc}
}

func (c *shardNodeClient) BatchQuery(ctx context.Context, in *RequestBatch, opts ...grpc.CallOption) (*ReplyBatch, error) {
	out := new(ReplyBatch)
	err := c.cc.Invoke(ctx, ShardNode_BatchQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardNodeClient) SendBlocks(ctx context.Context, in *SendBlocksRequest, opts ...grpc.CallOption) (*SendBlocksReply, error) {
	out := new(SendBlocksReply)
	err := c.cc.Invoke(ctx, ShardNode_SendBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardNodeClient) AckSentBlocks(ctx context.Context, in *AckSentBlocksRequest, opts ...grpc.CallOption) (*AckSentBlocksReply, error) {
	out := new(AckSentBlocksReply)
	err := c.cc.Invoke(ctx, ShardNode_AckSentBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardNodeClient) JoinRaftVoter(ctx context.Context, in *JoinRaftVoterRequest, opts ...grpc.CallOption) (*JoinRaftVoterReply, error) {
	out := new(JoinRaftVoterReply)
	err := c.cc.Invoke(ctx, ShardNode_JoinRaftVoter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardNodeServer is the server API for ShardNode service.
// All implementations must embed UnimplementedShardNodeServer
// for forward compatibility
type ShardNodeServer interface {
	BatchQuery(context.Context, *RequestBatch) (*ReplyBatch, error)
	SendBlocks(context.Context, *SendBlocksRequest) (*SendBlocksReply, error)
	AckSentBlocks(context.Context, *AckSentBlocksRequest) (*AckSentBlocksReply, error)
	JoinRaftVoter(context.Context, *JoinRaftVoterRequest) (*JoinRaftVoterReply, error)
	mustEmbedUnimplementedShardNodeServer()
}

// UnimplementedShardNodeServer must be embedded to have forward compatible implementations.
type UnimplementedShardNodeServer struct {
}

func (UnimplementedShardNodeServer) BatchQuery(context.Context, *RequestBatch) (*ReplyBatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQuery not implemented")
}
func (UnimplementedShardNodeServer) SendBlocks(context.Context, *SendBlocksRequest) (*SendBlocksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBlocks not implemented")
}
func (UnimplementedShardNodeServer) AckSentBlocks(context.Context, *AckSentBlocksRequest) (*AckSentBlocksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckSentBlocks not implemented")
}
func (UnimplementedShardNodeServer) JoinRaftVoter(context.Context, *JoinRaftVoterRequest) (*JoinRaftVoterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRaftVoter not implemented")
}
func (UnimplementedShardNodeServer) mustEmbedUnimplementedShardNodeServer() {}

// UnsafeShardNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShardNodeServer will
// result in compilation errors.
type UnsafeShardNodeServer interface {
	mustEmbedUnimplementedShardNodeServer()
}

func RegisterShardNodeServer(s grpc.ServiceRegistrar, srv ShardNodeServer) {
	s.RegisterService(&ShardNode_ServiceDesc, srv)
}

func _ShardNode_BatchQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardNodeServer).BatchQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardNode_BatchQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardNodeServer).BatchQuery(ctx, req.(*RequestBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardNode_SendBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardNodeServer).SendBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardNode_SendBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardNodeServer).SendBlocks(ctx, req.(*SendBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardNode_AckSentBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckSentBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardNodeServer).AckSentBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardNode_AckSentBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardNodeServer).AckSentBlocks(ctx, req.(*AckSentBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardNode_JoinRaftVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRaftVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardNodeServer).JoinRaftVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardNode_JoinRaftVoter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardNodeServer).JoinRaftVoter(ctx, req.(*JoinRaftVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShardNode_ServiceDesc is the grpc.ServiceDesc for ShardNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShardNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shardnode.ShardNode",
	HandlerType: (*ShardNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchQuery",
			Handler:    _ShardNode_BatchQuery_Handler,
		},
		{
			MethodName: "SendBlocks",
			Handler:    _ShardNode_SendBlocks_Handler,
		},
		{
			MethodName: "AckSentBlocks",
			Handler:    _ShardNode_AckSentBlocks_Handler,
		},
		{
			MethodName: "JoinRaftVoter",
			Handler:    _ShardNode_JoinRaftVoter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shardnode.proto",
}
